<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.watflix.model.mapper.ReportMapper">
	<!-- 신고 게시글 전체 조회 (재사용 용도) -->
 	<sql id="selectReportALL">
 		SELECT REPORT_NO,ID,REVIEW_NO,COMMENTS_NO,REPORT_TYPE_NO,REPORT_CONTENTS,
		to_char(REPORT_POSTED_TIME,'YYYY.MM.DD HH:MI:SS') as REPORT_POSTED_TIME
		FROM REPORT
 	</sql>
 	
 	<!-- 신고 수 조회( 리뷰 ) -->
 	<select id="mGetTotalReportReviewCount" resultType="int">
 		 select count(*) from report where REVIEW_NO is not NULL
 	</select>
 	<!-- 신고 수 조회( 평점 ) -->
 	<select id="mGetTotalReportCommentsCount" resultType="int">
 		select count(*) from report where REVIEW_NO is NULL
 	</select>
 	
 	<!-- 신고 리스트 조회( 리뷰 ) -->
 	<resultMap type="reportVO" id="reportReviewRM">
 		<result property="memberVO.id" column="id"/>
 		<result property="reviewVO.reviewNo" column="review_No"/>
 		<result property="reviewVO.memberVO.id" column="reportedId"/>
 		<result property="reportTypeVO.reportTypeInfo" column="report_Type_Info"/>
 	</resultMap>
 	<select id="mGetReportReviewList" parameterType="pagingBean" resultMap="reportReviewRM">
 		SELECT REPORT_NO,ID,REVIEW_NO,REPORT_TYPE_info,REPORT_CONTENTS,REPORT_POSTED_TIME,reportedId
		FROM(SELECT row_number() over(order by REPORT_NO desc) as re_num, r.REPORT_NO,r.ID,r.REVIEW_NO,r.COMMENTS_NO, rt.REPORT_TYPE_info, r.REPORT_CONTENTS, r.REPORT_POSTED_TIME, rv.id as reportedId
		FROM(
			<include refid="selectReportALL"/>
		) r, review rv, report_type rt where r.REVIEW_NO=rv.REVIEW_NO and r.report_type_no = rt.report_type_no)
		where re_num between #{startRowNumber} and #{endRowNumber}
		order by report_no desc
 	</select>
 	
 	<!-- 신고 리스트 조회( 평점 ) -->
 	<resultMap type="reportVO" id="reportCommentsRM">
 		<result property="memberVO.id" column="id"/>
 		<result property="commentsVO.commentsNo" column="comments_No"/>
 		<result property="commentsVO.memberVO.id" column="reportedId"/>
 		<result property="reportTypeVO.reportTypeInfo" column="report_Type_Info"/>
 	</resultMap>
 	<select id="mGetReportCommentsList" parameterType="pagingBean" resultMap="reportCommentsRM">
 		SELECT REPORT_NO,ID,COMMENTS_NO,REPORT_TYPE_info,REPORT_CONTENTS,REPORT_POSTED_TIME,reportedId
		FROM(SELECT row_number() over(order by r.REPORT_NO desc) as re_num, r.REPORT_NO,r.ID,r.REVIEW_NO,r.COMMENTS_NO, rt.REPORT_TYPE_info, r.REPORT_CONTENTS, r.REPORT_POSTED_TIME, c.id as reportedId
		FROM(
			<include refid="selectReportALL"/>
		) r, COMMENTS c, report_type rt where r.COMMENTS_NO=c.COMMENTS_NO and r.report_type_no = rt.report_type_no)
		where re_num between #{startRowNumber} and #{endRowNumber}
		order by report_no desc
 	</select>

 	<!-- ReportVO에 MemberVO의 id, ReviewVO의 reviewNo, CommentsVO의 commentsNo, ReportTypeVO의 reportTypeNo(has a 관계)를 넣을 수 있도록 ResaultMap을 셋팅한다. -->
 	<resultMap type="reportVO" id="reportBoardRM">
		<result property="memberVO.id" column="id"/>
		<result property="reviewVO.reviewNo" column="review_no"/>
		<result property="commentsVO.commentsNo" column="comments_no"/>
		<result property="reportTypeVO.reportTypeNo" column="report_type_no"/>
	</resultMap>
	<!-- 신고게시글 디테일 조회에 필요한 데이터를 셋팅된 ResultMap(reportVO)에 넣는다.(조회수는 올라가지 않는다.)  -->
	<select id="mReportGetDetailNoHits" parameterType="int" resultMap="reportBoardRM">
		SELECT r.report_no, r.id, r.review_no, r.comments_no, r.report_type_no, r.report_contents, to_char(r.report_posted_time,'YYYY.MM.DD HH:MI:SS') as report_posted_time, t.report_type_info
		FROM report r, report_type t WHERE r.report_type_no=t.report_type_no AND r.report_no=#{value}
	</select>
	
	<!-- 신고게시글(comments) 쓰기 -->
 	<insert id="mReportWriteComments" parameterType="reportVO">
 		<selectKey keyProperty="reportNo"  resultType="int" order="BEFORE">
 			SELECT report_seq.nextval FROM DUAL
 		</selectKey>
		INSERT INTO report(report_no, id, comments_no, report_type_no, report_contents)
		VALUES(#{reportNo}, #{memberVO.id}, #{commentsVO.commentsNo}, #{reportTypeVO.reportTypeNo}, #{reportContents})
 	</insert>
 	
	<!-- 신고게시글(review) 쓰기 -->
 	<insert id="mReportWriteReview" parameterType="reportVO">
 		<selectKey keyProperty="reportNo"  resultType="int" order="BEFORE">
 			SELECT report_seq.nextval FROM DUAL
 		</selectKey>
		INSERT INTO report(report_no, id, review_no, report_type_no, report_contents)
		VALUES(#{reportNo}, #{memberVO.id}, #{reviewVO.reviewNo}, #{reportTypeVO.reportTypeNo}, #{reportContents})
 	</insert>
 	
 	<!-- 공지게시글 삭제 -->
    <delete id="mReportDelete" parameterType="int">
       DELETE FROM REPORT WHERE REPORT_NO=#{value}
    </delete>
    
    <!-- 신고 글 작성 여부 확인(review) -->
    <select id="mReportCheckReview" parameterType="reportVO" resultType="int">
    	select count(*) from report where id=#{memberVO.id} and review_no=#{reviewVO.reviewNo}
    </select>
    <!-- 신고 글 작성 여부 확인(comments) -->
    <select id="mReportCheckComments" parameterType="reportVO" resultType="int">
    	select count(*) from report where id=#{memberVO.id} and comments_NO=#{commentsVO.commentsNo}
    </select>
    
    <!-- 삭제된 리뷰, 평점에 대한 신고 데이터를 관리하는 건에 대해서는 상의한 이후에 할 것 -->
    <!-- 리뷰, 평점 삭제하는 controller를 수정해야 하기 때문 -->
    <!-- foreign key 비활성화(리뷰) -->
    <select id="mDisableForeignkeyReview">
    	alter table REPORT disable constraint REPORT_REVIEW_NO_FK
    </select>
    <!-- foreign key 활성화(리뷰) -->
    <select id="mEnableForeignkeyReview">
    	alter table REPORT enable constraint REPORT_REVIEW_NO_FK
    </select>
    <!-- foreign key 비활성화(평점) -->
    <select id="mDisableForeignkeyComments">
    	alter table REPORT disable constraint REPORT_comments_NO_FK
    </select>
    <!-- foreign key 활성화(리뷰) -->
    <select id="mEnableForeignkeyComments">
    	alter table REPORT enable constraint REPORT_comments_NO_FK
    </select>
    
 	<!-- 내 신고글 보기(review) -->
	<select id="mGetMyReportReviewList" resultMap="reportReviewRM">
 		SELECT REPORT_NO,ID,REVIEW_NO,REPORT_TYPE_info,REPORT_CONTENTS,REPORT_POSTED_TIME,reportedId
		FROM(SELECT row_number() over(order by REPORT_NO desc) as re_num, r.REPORT_NO,r.ID,r.REVIEW_NO,r.COMMENTS_NO, rt.REPORT_TYPE_info, r.REPORT_CONTENTS, r.REPORT_POSTED_TIME, rv.id as reportedId
		FROM(
			<include refid="selectReportALL"/> where id = #{id}
		) r, review rv, report_type rt where r.REVIEW_NO=rv.REVIEW_NO and r.report_type_no = rt.report_type_no)
		where re_num between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by report_no desc
 	</select>
 	
 	<!-- 내가 신고한 리뷰글 수 조회  -->
 	<select id="mGetMyTotalReportReviewCount" parameterType="string" resultType="int">
 		 select count(*) from report where REVIEW_NO is not NULL and id=#{value}
 	</select>
 	<!-- 내가 신고한 평점글 수 조회 -->
 	<select id="mGetMyTotalReportCommentsCount" parameterType="string" resultType="int">
 		select count(*) from report where REVIEW_NO is NULL and id=#{value}
 	</select>
 	
 	<!-- 내 신고글 보기(comments) -->
 	<select id="mGetMyReportCommentsList" resultMap="reportCommentsRM">
 		SELECT REPORT_NO,ID,COMMENTS_NO,REPORT_TYPE_info,REPORT_CONTENTS,REPORT_POSTED_TIME,reportedId
		FROM(SELECT row_number() over(order by r.REPORT_NO desc) as re_num, r.REPORT_NO,r.ID,r.REVIEW_NO,r.COMMENTS_NO, rt.REPORT_TYPE_info, r.REPORT_CONTENTS, r.REPORT_POSTED_TIME, c.id as reportedId
		FROM(
			<include refid="selectReportALL"/> where id = #{id}
		) r, COMMENTS c, report_type rt where r.COMMENTS_NO=c.COMMENTS_NO and r.report_type_no = rt.report_type_no)
		where re_num between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by report_no desc
 	</select>

</mapper>










