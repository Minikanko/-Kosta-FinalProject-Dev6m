<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.watflix.model.mapper.ContentsMapper">
 	<resultMap type="contentsVO" id="contentsRM">
		<result property="genreVO.genreCode" column="GENRE_CODE"/>
		<result property="genreVO.genreName" column="GENRE_NAME"/>
	</resultMap>
	
 	<sql id="selectGenre">
 		select GENRE_CODE,GENRE_NAME from genre
 	</sql>
 
 	<!-- 특정 타입 출력 ex) tv드라마, 영화 -->
 	<select id="mGetContentsSelectForType" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{value}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	<!-- 특정 타입별 장르 출력 -->
 	<select id="mGetGenreSelectForType" resultType="genreVO">
 		select distinct G.GENRE_CODE, G.GENRE_NAME
		from (select CONTENTS_TYPE,GENRE_CODE from contents where CONTENTS_TYPE LIKE '%'||#{value}||'%') C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	
 	<!-- 장르리스트출력 -->
 	<select id="mGetAllGenreList" resultType="genreVO">
 		<include refid="selectGenre"></include>
 	</select>
 	<!-- 장르코드 검색 -->
 	<select id="mFindGenreByCode" resultType="genreVO">
 		<include refid="selectGenre"></include>
 	</select>
 	
 	<!-- 모든 컨텐츠 개수 출력 -->
 	<select id="mGetTotalContentsCount" resultType="int">
 		select count(*) from contents
 	</select>
 	
 	<!-- 특정 카테고리의 컨텐츠 개수 출력 -->
 	<select id="mGetTotalContentsCountForType" resultType="int">
 		select count(*) from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%'
 	</select>
 	
 	<!-- 모든 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsList" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	
 	<!-- 장르 & 컨텐츠 타입의 컨텐츠 리스트 출력 -->
 	<select id="mGetContentsAllForTypeAndGenre" resultMap="contentsRM" parameterType="map">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%' and genre_code=#{genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	
 	<!-- 컨텐츠 타입의 컨텐츠 리스트 출력 -->
 	<select id="mGetContentsAllForType" resultMap="contentsRM" parameterType="map">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	<!-- 컨텐츠 검색 -->
	<select id="mFindContentsByNo" resultMap="contentsRM" parameterType="string">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,
		CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and CONTENTS_NO=#{value}
 	</select>
 	
 	<!-- 인기컨텐츠 리스트 출력 -->
 	<select id="mContentsHighHits" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_LIKES DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10
 	</select>
 	
 	<!-- 평점높은 리스트 출력 -->
 	<select id="mContentsHighAvgStars" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_AVG_STARS DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10
 	</select>
 	
 	<!-- 장르 insert -->
 	<insert id="mGenreRegister" parameterType="genreVO">
 		insert into genre(GENRE_CODE,GENRE_NAME) values(#{genreCode},#{genreName})
 	</insert>
 	
 	<!-- 컨텐츠 insert -->
 	<insert id="mContentsRegister" parameterType="contentsVO">
 		insert into CONTENTS(CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE) 
 		values(#{contentsNo},#{contentsTitle},#{contentsType},#{genreVO.genreCode},#{contentsSummary},#{contentsSmallThumbnail},
 		#{contentsBigThumbnail},#{contentsDate},#{contentsRunningtime},#{contentsActor},#{contentsProducer},#{contentsAge})
 	</insert>
 	
 	<!-- comment 많은 순으로 content 불러오기 전체 장르(resultType 고민) -->
 	<select id="mContentsGetListByCommentCount">
 		SELECT b.contents_no, b.contents_title, b.contents_type, b.genre_code, b.contents_small_thumbnail, b.contents_big_thumbnail, b.contents_avg_stars, b.contents_likes, b.contents_hits, count(a.comments_no) as comments_count
		FROM comments a, contents b
		WHERE a.contents_no(+)=b.contents_no
		GROUP BY b.contents_no, b.contents_title, b.contents_type, b.genre_code, b.contents_small_thumbnail, b.contents_big_thumbnail, b.contents_avg_stars, b.contents_likes, b.contents_hits
		ORDER BY comments_count DESC;
 	</select>
 	<!-- 컨텐츠 추천수 증가 -->
 	<update id="mContentsLikeUpdate">
 		UPDATE CONTENTS SET CONTENTS_LIKES=CONTENTS_LIKES+1 WHERE CONTENTS_NO=#{VALUE}
 	</update>
 	<!-- 컨텐츠 추천수 감소 -->
 	<update id="mContentsLikeRemove">
 		UPDATE CONTENTS SET CONTENTS_LIKES=CONTENTS_LIKES-1 WHERE CONTENTS_NO=#{VALUE}
 	</update>
 	<!-- 각 content에 contents_avg_stars 넣기 -->
 	<update id="mUpdateAvgStars" parameterType="map">
 		UPDATE contents SET contents_avg_stars = #{avgStars} WHERE contents_no = #{contentsNo}
 	</update>
</mapper>










