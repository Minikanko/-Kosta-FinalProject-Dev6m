<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.watflix.model.mapper.ContentsMapper">
 	<resultMap type="contentsVO" id="contentsRM">
		<result property="genreVO.genreCode" column="GENRE_CODE"/>
		<result property="genreVO.genreName" column="GENRE_NAME"/>
	</resultMap>
	
 	<sql id="selectGenre">
 		select GENRE_CODE,GENRE_NAME from genre
 	</sql>
 
 	<!-- 특정 타입 출력 ex) tv드라마, 영화 -->
 	<select id="mGetContentsSelectForType" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{value}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	<!-- 특정 타입별 장르 출력 -->
 	<select id="mGetGenreSelectForType" resultType="genreVO">
 		select distinct G.GENRE_CODE, G.GENRE_NAME
		from (select CONTENTS_TYPE,GENRE_CODE from contents where CONTENTS_TYPE LIKE '%'||#{value}||'%') C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	
 	<!-- 장르리스트출력 -->
 	<select id="mGetAllGenreList" resultType="genreVO">
 		<include refid="selectGenre"></include>
 	</select>
 	<!-- 장르코드 검색 -->
 	<select id="mFindGenreByCode" resultType="int">
 		select count(*) from genre where genre_code=#{value}
 	</select>
 	
 	<!-- 모든 컨텐츠 개수 출력 -->
 	<select id="mGetTotalContentsCount" resultType="int">
 		select count(*) from contents
 	</select>
 	
 	<!-- 모든 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsList" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	
 	<!-- 장르 & 컨텐츠 타입의 컨텐츠 리스트 출력 -->
 	<select id="mGetContentsAllForTypeAndGenre" resultMap="contentsRM" parameterType="map">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%' and genre_code=#{genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	
 	<!-- 특정장르에서 최신순인 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsForGenreListSortByNew" resultMap="contentsRM" parameterType="map">
 		select rnum,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%' and genre_code=#{genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	
 	<!-- 특정장르에서 오래된순인 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsForGenreListSortByOld" resultMap="contentsRM" parameterType="map">
 		select rnum,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE ) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%' and genre_code=#{genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	
 	<!-- 장르 & 컨텐츠 타입의 컨텐츠 리스트 출력 with login -->
 	<select id="mGetContentsAllForTypeAndGenreLogin" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%' and genre_code=#{map.genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber}
 	</select>
 	
 	<!-- 특정장르에서 최신순인 컨텐츠 리스트 출력 with login-->
 	<select id="mGetAllContentsForGenreListSortByNewLogin" resultMap="contentsRM">
 		select rnum,(SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{id} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%' and genre_code=#{map.genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber}
 	</select>
 	
 	<!-- 특정장르에서 오래된순인 컨텐츠 리스트 출력 with login-->
 	<select id="mGetAllContentsForGenreListSortByOldLogin" resultMap="contentsRM" >
 		select rnum,(SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{id} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE ) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%' and genre_code=#{map.genreCode}) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber}
 	</select>

 	 	<!-- 로그인 전 컨텐츠 타입의 컨텐츠 리스트 출력 -->
 	<select id="mGetContentsAllForType" resultMap="contentsRM" parameterType="map">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber}
 	</select>
 	
 	<!-- 로그인 후 컨텐츠 타입의 컨텐츠 리스트 출력 -->
 	<select id="mGetContentsAllForTypeLogin" resultMap="contentsRM">
	select (SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{id} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber}
 	</select>
 	
 	<!-- 컨텐츠 검색 -->
	<select id="mFindContentsByNo" resultMap="contentsRM" parameterType="string">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,
		CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and CONTENTS_NO=#{value}
 	</select>
 	
 	<!-- 로그인 전 인기컨텐츠 리스트 출력 -->
 	<select id="mContentsHighHits" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,
		C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_LIKES DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,
		CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10
 	</select>
 	
 	<!-- 로그인 후 인기컨텐츠 리스트 출력 -->
 	<select id="mContentsHighHitsLogin" resultMap="contentsRM">
	 	SELECT (SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{value} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,
		C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,
		G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		FROM (SELECT row_number() over(ORDER BY CONTENTS_LIKES DESC) AS rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,
		CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, GENRE G
		WHERE C.GENRE_CODE=G.GENRE_CODE AND rnum BETWEEN 1 AND 10
 	</select>
 		
 	<!-- 로그인 전 평점높은 리스트 출력 -->
 	<select id="mContentsHighAvgStars" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_AVG_STARS DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10
 	</select>
 	
 	<!-- 로그인 후 평점높은 리스트 출력 -->
 	<select id="mContentsHighAvgStarsLogin" resultMap="contentsRM">
 		select (SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{value} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_AVG_STARS DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents) C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10
 	</select>
 	
 	<!-- 최신순에 따른 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsListSortByNew" resultMap="contentsRM" parameterType="map">
 		select rnum,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber} 
 	</select>
 	
 	<!-- 오래된순에 따른 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsListSortByOld" resultMap="contentsRM" parameterType="map">
 		select rnum,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE ) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{startNumber} AND #{endNumber} 
 	</select>
 	
 	<!-- 로그인상태에서의 최신순에 따른 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsListSortByNewLogin" resultMap="contentsRM">
 		select rnum,(SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{id} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber} 
 	</select>
 	
 	<!-- 로그인상태에서의 오래된순에 따른 컨텐츠 리스트 출력 -->
 	<select id="mGetAllContentsListSortByOldLogin" resultMap="contentsRM" >
 		select rnum,(SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{id} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
 		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_DATE ) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,
		CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE from contents where CONTENTS_TYPE LIKE '%'||#{map.contentsType}||'%') C, 
		GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN #{map.startNumber} AND #{map.endNumber} 
 	</select>
 	
 	<!-- 장르 insert -->
 	<insert id="mGenreRegister" parameterType="genreVO">
 		insert into genre(GENRE_CODE,GENRE_NAME) values(#{genreCode},#{genreName})
 	</insert>
 	
 	<!-- 컨텐츠 insert -->
 	<insert id="mContentsRegister" parameterType="contentsVO">
 		insert into CONTENTS(CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,CONTENTS_BIG_THUMBNAIL,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE) 
 		values(#{contentsNo},#{contentsTitle},#{contentsType},#{genreVO.genreCode},#{contentsSummary},#{contentsSmallThumbnail},
 		#{contentsBigThumbnail},#{contentsDate},#{contentsRunningtime},#{contentsActor},#{contentsProducer},#{contentsAge})
 	</insert>
 	
 	<!-- comment 많은 순으로 content 불러오기 전체 장르(resultType 고민) -->
 	<select id="mContentsHighCommentsCount" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by ea DESC) as rnum,c.ea,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,C.GENRE_CODE,
		C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,
		C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,C.CONTENTS_DATE,C.CONTENTS_RUNNINGTIME,C.CONTENTS_ACTOR,C.CONTENTS_PRODUCER,C.CONTENTS_AGE from 
		(select distinct (select count(*) from comments where contents_no=c.contents_no) as ea,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,C.GENRE_CODE,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,
		C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		C.CONTENTS_DATE,C.CONTENTS_RUNNINGTIME,C.CONTENTS_ACTOR,C.CONTENTS_PRODUCER,C.CONTENTS_AGE from contents c) C)
		C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10 
 	</select>
 	
 	<!-- comment 많은 순으로 content 불러오기 전체 장르(resultType 고민) -->
 	<select id="mContentsHighCommentsCountLogin" resultMap="contentsRM">
 		select (SELECT COUNT(*) FROM CONTENTS_LIKE WHERE ID = #{value} AND C.CONTENTS_NO=CONTENTS_NO) AS CONTENTS_LIKE_STATUS, C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by ea DESC) as rnum,c.ea,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,C.GENRE_CODE,
		C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,
		C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,C.CONTENTS_DATE,C.CONTENTS_RUNNINGTIME,C.CONTENTS_ACTOR,C.CONTENTS_PRODUCER,C.CONTENTS_AGE from 
		(select distinct (select count(*) from comments where contents_no=c.contents_no) as ea,C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,C.GENRE_CODE,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,
		C.CONTENTS_BIG_THUMBNAIL,C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,
		C.CONTENTS_DATE,C.CONTENTS_RUNNINGTIME,C.CONTENTS_ACTOR,C.CONTENTS_PRODUCER,C.CONTENTS_AGE from contents c) C)
		C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE and rnum BETWEEN 1 AND 10 
 	</select>
 	<!-- 컨텐츠 추천수 증가 -->
 	<update id="mContentsLikeUpdate">
 		UPDATE CONTENTS SET CONTENTS_LIKES=CONTENTS_LIKES+1 WHERE CONTENTS_NO=#{VALUE}
 	</update>
 	<!-- 컨텐츠 추천수 감소 -->
 	<update id="mContentsLikeRemove">
 		UPDATE CONTENTS SET CONTENTS_LIKES=CONTENTS_LIKES-1 WHERE CONTENTS_NO=#{VALUE}
 	</update>
 	<!-- 각 content에 contents_avg_stars 넣기 -->
 	<update id="mUpdateAvgStars" parameterType="map">
 		UPDATE contents SET contents_avg_stars = #{avgStars} WHERE contents_no = #{contentsNo}
 	</update>
 	<!-- 컨텐츠 검색 -->
 	<select id="mGetContentsSelectForTitle" parameterType="string" resultMap="contentsRM">
 		select C.CONTENTS_NO,C.CONTENTS_TITLE,C.CONTENTS_TYPE,G.GENRE_CODE,G.GENRE_NAME,C.CONTENTS_SUMMARY,C.CONTENTS_SMALL_THUMBNAIL,C.CONTENTS_BIG_THUMBNAIL,
		C.CONTENTS_AVG_STARS,C.CONTENTS_LIKES,C.CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from (select row_number() over(order by CONTENTS_NO DESC) as rnum,CONTENTS_NO,CONTENTS_TITLE,CONTENTS_TYPE,GENRE_CODE,CONTENTS_SUMMARY,CONTENTS_SMALL_THUMBNAIL,
		CONTENTS_BIG_THUMBNAIL,CONTENTS_AVG_STARS,CONTENTS_LIKES,CONTENTS_HITS,CONTENTS_DATE,CONTENTS_RUNNINGTIME,CONTENTS_ACTOR,CONTENTS_PRODUCER,CONTENTS_AGE
		from contents where contents_title like '%'||#{value}||'%') C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
 	<!-- 검색된 컨텐츠의 장르 출력 -->
 	<select id="mGenreSelectForTitle" parameterType="string" resultType="genreVO">
 		select distinct G.GENRE_CODE, G.GENRE_NAME
		from (select CONTENTS_TYPE, GENRE_CODE
		from CONTENTS where contents_title like '%'||#{value}||'%') C, GENRE G
		where C.GENRE_CODE=G.GENRE_CODE
 	</select>
</mapper>